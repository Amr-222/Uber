@model List<Uber.DAL.Entities.Driver>
@{
    ViewData["Title"] = "Drivers Management";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 20px 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px;
    }

    .header h1 {
        font-size: 28px;
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .header-nav a {
        color: white;
        text-decoration: none;
        margin-left: 30px;
        font-weight: 500;
        transition: all 0.3s ease;
        padding: 8px 16px;
        border-radius: 20px;
    }

    .header-nav a:hover {
        background: rgba(255,255,255,0.2);
        transform: translateY(-2px);
    }

    .container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .page-title {
        text-align: center;
        font-size: 32px;
        font-weight: 700;
        color: white;
        margin-bottom: 40px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .stat-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }

    .stat-number {
        font-size: 36px;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 10px;
    }

    .stat-label {
        color: #666;
        font-size: 16px;
        font-weight: 500;
    }

    .drivers-table-container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 40px;
    }

    .table-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 25px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-header h2 {
        font-size: 24px;
        font-weight: 600;
    }

    .search-box {
        position: relative;
        width: 300px;
    }

    .search-box input {
        width: 100%;
        padding: 12px 20px;
        border: none;
        border-radius: 25px;
        background: rgba(255,255,255,0.9);
        font-size: 14px;
        outline: none;
        transition: all 0.3s ease;
    }

    .search-box input:focus {
        background: white;
        box-shadow: 0 0 0 3px rgba(255,255,255,0.3);
    }

    .drivers-table {
        width: 100%;
        border-collapse: collapse;
    }

    .drivers-table th {
        background: #f8f9fa;
        padding: 18px 15px;
        text-align: left;
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #e9ecef;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .drivers-table td {
        padding: 20px 15px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: middle;
        font-size: 14px;
        color: #495057;
    }

    .drivers-table tr:hover {
        background: #f8f9fa;
        transform: scale(1.01);
        transition: all 0.2s ease;
    }

    .driver-photo {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #e9ecef;
        transition: all 0.3s ease;
    }

    .driver-photo:hover {
        transform: scale(1.1);
        border-color: #667eea;
    }

    .driver-info {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .driver-name {
        font-weight: 600;
        color: #2c3e50;
        font-size: 16px;
    }

    .driver-email {
        color: #7f8c8d;
        font-size: 13px;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-active {
        background: #d4edda;
        color: #155724;
    }

    .status-inactive {
        background: #f8d7da;
        color: #721c24;
    }

    .vehicle-info {
        display: flex;
        flex-direction: column;
        gap: 3px;
    }

    .vehicle-main {
        font-weight: 600;
        color: #2c3e50;
    }

    .vehicle-details {
        color: #7f8c8d;
        font-size: 12px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        font-size: 13px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

    .btn-edit {
        background: #17a2b8;
        color: white;
    }

    .btn-edit:hover {
        background: #138496;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(23, 162, 184, 0.3);
    }

    .btn-delete {
        background: #dc3545;
        color: white;
    }

    .btn-delete:hover {
        background: #c82333;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
    }

    .btn-toggle {
        background: #28a745;
        color: white;
    }

    .btn-toggle:hover {
        background: #218838;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    }

    .btn-toggle.inactive {
        background: #6c757d;
    }

    .btn-toggle.inactive:hover {
        background: #5a6268;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 48px;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        backdrop-filter: blur(5px);
    }

    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 30px;
        border-radius: 20px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        animation: modalSlideIn 0.3s ease;
    }

    @keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e9ecef;
    }

    .modal-title {
        font-size: 24px;
        font-weight: 600;
        color: #2c3e50;
    }

    .close {
        font-size: 28px;
        font-weight: bold;
        color: #aaa;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .close:hover {
        color: #000;
    }

    .modal-body {
        margin-bottom: 25px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 15px;
    }

    .btn-cancel {
        background: #6c757d;
        color: white;
    }

    .btn-cancel:hover {
        background: #5a6268;
    }

    .btn-confirm {
        background: #dc3545;
        color: white;
    }

    .btn-confirm:hover {
        background: #c82333;
    }

    @media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 20px;
        }

        .header-nav a {
            margin: 0 10px;
        }

        .stats-cards {
            grid-template-columns: 1fr;
        }

        .table-header {
            flex-direction: column;
            gap: 20px;
        }

        .search-box {
            width: 100%;
        }

        .drivers-table {
            font-size: 12px;
        }

        .drivers-table th,
        .drivers-table td {
            padding: 12px 8px;
        }

        .action-buttons {
            flex-direction: column;
            gap: 5px;
        }

        .btn {
            padding: 6px 12px;
            font-size: 12px;
        }
    }
</style>

<div class="header">
    <div class="header-content">
        <h1>🚗 Uber Admin Dashboard</h1>
        <div class="header-nav">
            <a asp-controller="Admin" asp-action="AdminDashBoard">Dashboard</a>
            <a asp-controller="Admin" asp-action="Admin_Drivers">Drivers</a>
            <a asp-controller="Admin" asp-action="Admin_Riders">Riders</a>
            <a asp-controller="Admin" asp-action="Admin_Rides">Rides</a>
            <a asp-controller="Admin" asp-action="Admin_Admines">Admins</a>
        </div>
    </div>
</div>

<div class="container">
    <h1 class="page-title">🚗 Drivers Management</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            ✅ @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            ❌ @TempData["ErrorMessage"]
        </div>
    }

    <div class="stats-cards">
        <div class="stat-card">
            <div class="stat-number">@Model.Count</div>
            <div class="stat-label">Total Drivers</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(d => d.IsActive)</div>
            <div class="stat-label">Active Drivers</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(d => !d.IsActive)</div>
            <div class="stat-label">Inactive Drivers</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(d => d.Vehicle != null)</div>
            <div class="stat-label">With Vehicles</div>
        </div>
    </div>

    <div class="drivers-table-container">
        <div class="table-header">
            <h2>📋 Drivers List</h2>
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search drivers..." onkeyup="filterTable()">
            </div>
        </div>

        @if (Model != null && Model.Any())
        {
            <table class="drivers-table" id="driversTable">
                <thead>
                    <tr>
                        <th>Driver</th>
                        <th>Contact Info</th>
                        <th>Status</th>
                        <th>Vehicle Details</th>
                        <th>Rating</th>
                        <th>Created Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var driver in Model)
                    {
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center; gap: 15px;">
                                    <img src="@(string.IsNullOrEmpty(driver.ImagePath) ? "/Files/default-avatar.png" : "/Files/" + driver.ImagePath)" 
                                         alt="Driver Photo" 
                                         class="driver-photo"
                                         onerror="this.src='/Files/default-avatar.png'">
                                    <div class="driver-info">
                                        <div class="driver-name">@driver.Name</div>
                                        <div style="color: #7f8c8d; font-size: 12px;">
                                            Age: @driver.Age() • @driver.Gender
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="driver-info">
                                    <div class="driver-email">@driver.Email</div>
                                    <div style="color: #7f8c8d; font-size: 12px;">@driver.PhoneNumber</div>
                                </div>
                            </td>
                            <td>
                                <span class="status-badge @(driver.IsActive ? "status-active" : "status-inactive")">
                                    @(driver.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                @if (driver.Vehicle != null)
                                {
                                    <div class="vehicle-info">
                                        <div class="vehicle-main">@driver.Vehicle.Brand @driver.Vehicle.Model</div>
                                        <div class="vehicle-details">
                                            @driver.Vehicle.YearMade • @driver.Vehicle.Color • @driver.Vehicle.Plate
                                        </div>
                                        <div class="vehicle-details">
                                            @driver.Vehicle.Get_Type() • @driver.Vehicle.Transmission • @driver.Vehicle.VehicleEngine
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <span style="color: #6c757d; font-style: italic;">No vehicle assigned</span>
                                }
                            </td>
                            <td>
                                <div style="text-align: center;">
                                    <div style="font-size: 18px; font-weight: 600; color: #f39c12;">@driver.Rating().ToString("F1")</div>
                                    <div style="font-size: 12px; color: #7f8c8d;">@driver.TotalRatings ratings</div>
                                </div>
                            </td>
                            <td>
                                <div style="text-align: center;">
                                    <div style="font-weight: 600; color: #2c3e50;">@driver.CreatedAt.ToString("MMM dd, yyyy")</div>
                                    <div style="font-size: 12px; color: #7f8c8d;">@driver.CreatedAt.ToString("HH:mm")</div>
                                </div>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="@Url.Action("EditDriver", "Admin", new { id = driver.Id })" class="btn btn-edit">
                                        ✏️ Edit
                                    </a>
                                    <button class="btn btn-toggle @(!driver.IsActive ? "inactive" : "")" 
                                            onclick="toggleDriverStatus('@driver.Id', @driver.IsActive.ToString().ToLower())">
                                        @(driver.IsActive ? "🔴 Deactivate" : "🟢 Activate")
                                    </button>
                                    <button class="btn btn-delete" onclick="deleteDriver('@driver.Id', '@driver.Name')">
                                        🗑️ Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="empty-state">
                <div style="font-size: 48px; margin-bottom: 20px;">🚗</div>
                <h3>No Drivers Found</h3>
                <p>There are currently no drivers registered in the system.</p>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">🗑️ Delete Driver</h3>
            <span class="close" onclick="closeModal('deleteModal')">&times;</span>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete <strong id="driverNameToDelete"></strong>?</p>
            <p style="color: #dc3545; font-size: 14px; margin-top: 10px;">
                ⚠️ This action cannot be undone. All driver data will be permanently removed.
            </p>
        </div>
        <div class="modal-footer">
            <button class="btn btn-cancel" onclick="closeModal('deleteModal')">Cancel</button>
            <form id="deleteForm" method="post" action="@Url.Action("DeleteDriver", "Admin")" style="display: inline;">
                <input type="hidden" id="driverIdToDelete" name="id" />
                <button type="submit" class="btn btn-confirm">Delete Driver</button>
            </form>
        </div>
    </div>
</div>

<script>
    function filterTable() {
        const input = document.getElementById('searchInput');
        const filter = input.value.toLowerCase();
        const table = document.getElementById('driversTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) {
            const row = rows[i];
            const cells = row.getElementsByTagName('td');
            let found = false;

            for (let j = 0; j < cells.length; j++) {
                const cell = cells[j];
                if (cell.textContent.toLowerCase().indexOf(filter) > -1) {
                    found = true;
                    break;
                }
            }

            row.style.display = found ? '' : 'none';
        }
    }

    function deleteDriver(driverId, driverName) {
        document.getElementById('driverNameToDelete').textContent = driverName;
        document.getElementById('driverIdToDelete').value = driverId;
        document.getElementById('deleteModal').style.display = 'block';
    }

    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }

    function toggleDriverStatus(driverId, currentStatus) {
        const makeActive = currentStatus === 'false';
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("ToggleDriverStatus", "Admin")';
        
        const idInput = document.createElement('input');
        idInput.type = 'hidden';
        idInput.name = 'id';
        idInput.value = driverId;
        
        const statusInput = document.createElement('input');
        statusInput.type = 'hidden';
        statusInput.name = 'makeActive';
        statusInput.value = makeActive;
        
        form.appendChild(idInput);
        form.appendChild(statusInput);
        document.body.appendChild(form);
        form.submit();
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modals = document.getElementsByClassName('modal');
        for (let modal of modals) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }
    }

    // Auto-hide alerts after 5 seconds
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        });
    }, 5000);
</script>

