@model List<Uber.DAL.Entities.User>
@{
    ViewData["Title"] = "Riders Management";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 20px 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px;
    }

    .header h1 {
        font-size: 28px;
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .header-nav a {
        color: white;
        text-decoration: none;
        margin-left: 30px;
        font-weight: 500;
        transition: all 0.3s ease;
        padding: 8px 16px;
        border-radius: 20px;
    }

    .header-nav a:hover {
        background: rgba(255,255,255,0.2);
        transform: translateY(-2px);
    }

    .container {
        max-width: 1400px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .page-title {
        text-align: center;
        font-size: 32px;
        font-weight: 700;
        color: white;
        margin-bottom: 40px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .stat-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }

    .stat-number {
        font-size: 36px;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 10px;
    }

    .stat-label {
        color: #666;
        font-size: 16px;
        font-weight: 500;
    }

    .riders-table-container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 40px;
    }

    .table-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 25px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-header h2 {
        font-size: 24px;
        font-weight: 600;
    }

    .search-box {
        position: relative;
        width: 300px;
    }

    .search-box input {
        width: 100%;
        padding: 12px 20px;
        border: none;
        border-radius: 25px;
        background: rgba(255,255,255,0.9);
        font-size: 14px;
        outline: none;
        transition: all 0.3s ease;
    }

    .search-box input:focus {
        background: white;
        box-shadow: 0 0 0 3px rgba(255,255,255,0.3);
    }

    .riders-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    .riders-table th {
        background: #f8f9fa;
        padding: 18px 12px;
        text-align: left;
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #e9ecef;
        font-size: 13px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }

    .riders-table td {
        padding: 16px 12px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: top;
        color: #495057;
        line-height: 1.4;
    }

    .riders-table tr:hover {
        background: #f8f9fa;
        transform: scale(1.005);
        transition: all 0.2s ease;
    }

    .rider-id {
        font-weight: 600;
        color: #667eea;
        font-size: 16px;
    }

    .rider-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 700;
        font-size: 18px;
        margin: 0 auto;
    }

    .rider-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .rider-name {
        font-weight: 600;
        color: #2c3e50;
        font-size: 15px;
    }

    .rider-email {
        color: #6c757d;
        font-size: 12px;
        word-break: break-all;
    }

    .rider-phone {
        color: #495057;
        font-size: 13px;
        font-weight: 500;
    }

    .rider-details {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .detail-row {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .detail-label {
        font-weight: 600;
        color: #495057;
        font-size: 12px;
        min-width: 60px;
    }

    .detail-value {
        color: #2c3e50;
        font-size: 12px;
    }

    .gender-badge {
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-align: center;
        white-space: nowrap;
    }

    .gender-male {
        background: #d1ecf1;
        color: #0c5460;
    }

    .gender-female {
        background: #f8d7da;
        color: #721c24;
    }

    .rating-info {
        text-align: center;
    }

    .rating {
        font-size: 16px;
        font-weight: 600;
        color: #f39c12;
        margin-bottom: 4px;
    }

    .rating-label {
        color: #7f8c8d;
        font-size: 11px;
        text-transform: uppercase;
    }

    .balance-info {
        text-align: center;
    }

    .balance-amount {
        font-size: 16px;
        font-weight: 600;
        color: #28a745;
        margin-bottom: 4px;
    }

    .balance-label {
        color: #7f8c8d;
        font-size: 11px;
        text-transform: uppercase;
    }

    .rides-count {
        text-align: center;
        font-weight: 600;
        color: #17a2b8;
        font-size: 16px;
    }

    .datetime-info {
        text-align: center;
    }

    .date {
        font-weight: 600;
        color: #2c3e50;
        font-size: 13px;
    }

    .time {
        color: #7f8c8d;
        font-size: 11px;
    }

    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: center;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
        min-width: 80px;
        justify-content: center;
    }

    .btn-edit {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        color: white;
    }

    .btn-edit:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(23, 162, 184, 0.3);
    }

    .btn-delete {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
    }

    .btn-delete:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 48px;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .filters {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .filters h3 {
        margin-bottom: 15px;
        color: #2c3e50;
        font-size: 18px;
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        align-items: end;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .filter-group label {
        font-weight: 600;
        color: #495057;
        font-size: 13px;
    }

    .filter-control {
        padding: 8px 12px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .filter-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .filter-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
    }

    @media (max-width: 1200px) {
        .riders-table {
            font-size: 12px;
        }

        .riders-table th,
        .riders-table td {
            padding: 12px 8px;
        }

        .rider-avatar {
            width: 40px;
            height: 40px;
            font-size: 16px;
        }

        .btn {
            padding: 6px 12px;
            font-size: 11px;
        }
    }

    @media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 20px;
        }

        .header-nav a {
            margin: 0 10px;
        }

        .stats-cards {
            grid-template-columns: 1fr;
        }

        .table-header {
            flex-direction: column;
            gap: 20px;
        }

        .search-box {
            width: 100%;
        }

        .riders-table {
            font-size: 11px;
        }

        .riders-table th,
        .riders-table td {
            padding: 8px 6px;
        }

        .filter-row {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="header">
    <div class="header-content">
        <h1>🚗 Uber Admin Dashboard</h1>
        <div class="header-nav">
            <a asp-controller="Admin" asp-action="AdminDashBoard">Dashboard</a>
            <a asp-controller="Admin" asp-action="Admin_Drivers">Drivers</a>
            <a asp-controller="Admin" asp-action="Admin_Riders">Riders</a>
            <a asp-controller="Admin" asp-action="Admin_Rides">Rides</a>
            <a asp-controller="Admin" asp-action="Admin_Admines">Admins</a>
        </div>
    </div>
</div>

<div class="container">
    <h1 class="page-title">👥 Riders Management</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            ✅ @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            ❌ @TempData["ErrorMessage"]
        </div>
    }

    <div class="stats-cards">
        <div class="stat-card">
            <div class="stat-number">@Model.Count</div>
            <div class="stat-label">Total Riders</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => !u.IsDeleted)</div>
            <div class="stat-label">Active Riders</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => u.Rides != null && u.Rides.Any())</div>
            <div class="stat-label">Riders with Trips</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => u.Balance > 0)</div>
            <div class="stat-label">Riders with Balance</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => u.TotalRatings > 0)</div>
            <div class="stat-label">Rated Riders</div>
        </div>
    </div>

    <div class="filters">
        <h3>🔍 Filters</h3>
        <div class="filter-row">
            <div class="filter-group">
                <label for="genderFilter">Gender</label>
                <select id="genderFilter" class="filter-control">
                    <option value="">All Genders</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="ratingFilter">Rating</label>
                <select id="ratingFilter" class="filter-control">
                    <option value="">All Ratings</option>
                    <option value="5">5 Stars</option>
                    <option value="4">4+ Stars</option>
                    <option value="3">3+ Stars</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="searchInput">Search</label>
                <input type="text" id="searchInput" class="filter-control" placeholder="Search riders...">
            </div>
            <button class="filter-btn" onclick="applyFilters()">Apply Filters</button>
        </div>
    </div>

    <div class="riders-table-container">
        <div class="table-header">
            <h2>📋 All Riders</h2>
            <div class="search-box">
                <input type="text" id="quickSearch" placeholder="Quick search..." onkeyup="quickSearch()">
            </div>
        </div>

        @if (Model != null && Model.Any())
        {
            <div style="overflow-x: auto;">
                <table class="riders-table" id="ridersTable">
                    <thead>
                        <tr>
                            <th>Rider</th>
                            <th>Contact Info</th>
                            <th>Personal Details</th>
                            <th>Rating</th>
                            <th>Balance</th>
                            <th>Rides</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.Where(u => !u.IsDeleted))
                        {
                            <tr>
                                <td>
                                    <div class="rider-avatar">@user.Name.Substring(0, 1).ToUpper()</div>
                                    <div class="rider-info">
                                        <div class="rider-name">@user.Name</div>
                                        <div class="rider-email">@user.Email</div>
                                    </div>
                                </td>
                                <td>
                                    <div class="rider-details">
                                        <div class="detail-row">
                                            <span class="detail-label">Phone:</span>
                                            <span class="rider-phone">@user.PhoneNumber</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="detail-label">Email:</span>
                                            <span class="detail-value">@user.Email</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="rider-details">
                                        <div class="detail-row">
                                            <span class="detail-label">Age:</span>
                                            <span class="detail-value">@user.Age() years</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="detail-label">Gender:</span>
                                            <span class="detail-value">
                                                <span class="gender-badge gender-@user.Gender.ToString().ToLower()">
                                                    @user.Gender.ToString()
                                                </span>
                                            </span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="detail-label">DOB:</span>
                                            <span class="detail-value">@user.DateOfBirth.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="rating-info">
                                        <div class="rating">@user.Rating().ToString("F1")/5 ⭐</div>
                                        <div class="rating-label">@user.TotalRatings ratings</div>
                                    </div>
                                </td>
                                <td>
                                    <div class="balance-info">
                                        <div class="balance-amount">$@user.Balance.ToString("F2")</div>
                                        <div class="balance-label">Wallet Balance</div>
                                    </div>
                                </td>
                                <td>
                                    <div class="rides-count">
                                        @(user.Rides?.Count ?? 0) rides
                                    </div>
                                </td>
                                <td>
                                    <div class="datetime-info">
                                        <div class="date">@user.CreatedAt.ToString("MMM dd, yyyy")</div>
                                        <div class="time">@user.CreatedAt.ToString("HH:mm")</div>
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="@Url.Action("EditUser", "Admin", new { id = user.Id })" class="btn btn-edit">
                                            ✏️ Edit
                                        </a>
                                        <button class="btn btn-delete" onclick="deleteUser('@user.Id', '@user.Name')">
                                            🗑️ Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div style="font-size: 48px; margin-bottom: 20px;">👥</div>
                <h3>No Riders Found</h3>
                <p>There are currently no riders in the system.</p>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5);">
    <div style="background-color: white; margin: 15% auto; padding: 30px; border-radius: 15px; width: 90%; max-width: 500px; text-align: center; box-shadow: 0 15px 35px rgba(0,0,0,0.3);">
        <h3 style="color: #dc3545; margin-bottom: 20px;">⚠️ Confirm Deletion</h3>
        <p style="margin-bottom: 25px; color: #495057;">Are you sure you want to delete rider <strong id="riderNameToDelete"></strong>?</p>
        <p style="margin-bottom: 25px; color: #6c757d; font-size: 14px;">This action cannot be undone and will remove all associated data.</p>
        
        <form id="deleteForm" method="post" action="@Url.Action("DeleteUser", "Admin")" style="display: inline;">
            <input type="hidden" id="userIdToDelete" name="id" />
            <button type="submit" class="btn btn-delete" style="margin-right: 10px;">🗑️ Delete Rider</button>
        </form>
        
        <button onclick="closeModal('deleteModal')" class="btn" style="background: #6c757d; color: white;">❌ Cancel</button>
    </div>
</div>

<script>
    function quickSearch() {
        const input = document.getElementById('quickSearch');
        const filter = input.value.toLowerCase();
        const table = document.getElementById('ridersTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) {
            const row = rows[i];
            const cells = row.getElementsByTagName('td');
            let found = false;

            for (let j = 0; j < cells.length; j++) {
                const cell = cells[j];
                if (cell.textContent.toLowerCase().indexOf(filter) > -1) {
                    found = true;
                    break;
                }
            }

            row.style.display = found ? '' : 'none';
        }
    }

    function applyFilters() {
        const genderFilter = document.getElementById('genderFilter').value;
        const ratingFilter = document.getElementById('ratingFilter').value;
        const searchFilter = document.getElementById('searchInput').value;

        // Apply filters logic here
        console.log('Applying filters:', { genderFilter, ratingFilter, searchFilter });
        
        // For now, just show a message
        alert('Filters applied! (Implementation needed)');
    }

    function deleteUser(userId, userName) {
        document.getElementById('riderNameToDelete').textContent = userName;
        document.getElementById('userIdToDelete').value = userId;
        document.getElementById('deleteModal').style.display = 'block';
    }

    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('deleteModal');
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    }

    // Auto-hide alerts after 5 seconds
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        });
    }, 5000);
</script>

