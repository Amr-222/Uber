@model List<Uber.DAL.Entities.Ride>
@{
    ViewData["Title"] = "Rides Management";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 20px 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px;
    }

    .header h1 {
        font-size: 28px;
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .header-nav a {
        color: white;
        text-decoration: none;
        margin-left: 30px;
        font-weight: 500;
        transition: all 0.3s ease;
        padding: 8px 16px;
        border-radius: 20px;
    }

    .header-nav a:hover {
        background: rgba(255,255,255,0.2);
        transform: translateY(-2px);
    }

    .container {
        max-width: 1400px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .page-title {
        text-align: center;
        font-size: 32px;
        font-weight: 700;
        color: white;
        margin-bottom: 40px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .stat-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }

    .stat-number {
        font-size: 36px;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 10px;
    }

    .stat-label {
        color: #666;
        font-size: 16px;
        font-weight: 500;
    }

    .rides-table-container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 40px;
    }

    .table-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 25px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-header h2 {
        font-size: 24px;
        font-weight: 600;
    }

    .search-box {
        position: relative;
        width: 300px;
    }

    .search-box input {
        width: 100%;
        padding: 12px 20px;
        border: none;
        border-radius: 25px;
        background: rgba(255,255,255,0.9);
        font-size: 14px;
        outline: none;
        transition: all 0.3s ease;
    }

    .search-box input:focus {
        background: white;
        box-shadow: 0 0 0 3px rgba(255,255,255,0.3);
    }

    .rides-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    .rides-table th {
        background: #f8f9fa;
        padding: 18px 12px;
        text-align: left;
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #e9ecef;
        font-size: 13px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }

    .rides-table td {
        padding: 16px 12px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: top;
        color: #495057;
        line-height: 1.4;
    }

    .rides-table tr:hover {
        background: #f8f9fa;
        transform: scale(1.005);
        transition: all 0.2s ease;
    }

    .ride-id {
        font-weight: 600;
        color: #667eea;
        font-size: 16px;
    }

    .participants {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .participant {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 3px solid #667eea;
    }

    .participant.driver {
        border-left-color: #28a745;
    }

    .participant.rider {
        border-left-color: #17a2b8;
    }

    .participant-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: #667eea;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 12px;
    }

    .participant.driver .participant-avatar {
        background: #28a745;
    }

    .participant.rider .participant-avatar {
        background: #17a2b8;
    }

    .participant-info {
        flex: 1;
    }

    .participant-name {
        font-weight: 600;
        color: #2c3e50;
        font-size: 13px;
    }

    .participant-details {
        color: #7f8c8d;
        font-size: 11px;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-align: center;
        white-space: nowrap;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-accepted {
        background: #d1ecf1;
        color: #0c5460;
    }

    .status-rejected {
        background: #f8d7da;
        color: #721c24;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
    }

    .status-inprogress {
        background: #d4edda;
        color: #155724;
    }

    .status-completed {
        background: #d1ecf1;
        color: #0c5460;
    }

    .location-info {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .location {
        padding: 8px 12px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 3px solid #28a745;
    }

    .location.pickup {
        border-left-color: #28a745;
    }

    .location.dropoff {
        border-left-color: #dc3545;
    }

    .location-label {
        font-weight: 600;
        color: #2c3e50;
        font-size: 11px;
        text-transform: uppercase;
        margin-bottom: 4px;
    }

    .location-coords {
        color: #7f8c8d;
        font-size: 11px;
        font-family: 'Courier New', monospace;
    }

    .datetime-info {
        text-align: center;
    }

    .date {
        font-weight: 600;
        color: #2c3e50;
        font-size: 13px;
    }

    .time {
        color: #7f8c8d;
        font-size: 11px;
    }

    .fare-info {
        text-align: center;
    }

    .fare-amount {
        font-size: 18px;
        font-weight: 700;
        color: #28a745;
    }

    .fare-label {
        color: #7f8c8d;
        font-size: 11px;
        text-transform: uppercase;
    }

    .rating-info {
        text-align: center;
    }

    .rating {
        font-size: 16px;
        font-weight: 600;
        color: #f39c12;
    }

    .rating-label {
        color: #7f8c8d;
        font-size: 11px;
    }

    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: center;
    }

    .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 6px;
        font-size: 11px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 4px;
        white-space: nowrap;
    }

    .btn-view {
        background: #17a2b8;
        color: white;
    }

    .btn-view:hover {
        background: #138496;
        transform: translateY(-1px);
    }

    .btn-cancel {
        background: #dc3545;
        color: white;
    }

    .btn-cancel:hover {
        background: #c82333;
        transform: translateY(-1px);
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 48px;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .filters {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .filters h3 {
        margin-bottom: 15px;
        color: #2c3e50;
        font-size: 18px;
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        align-items: end;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .filter-group label {
        font-weight: 600;
        color: #495057;
        font-size: 13px;
    }

    .filter-control {
        padding: 8px 12px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .filter-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .filter-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
    }

    @media (max-width: 1200px) {
        .rides-table {
            font-size: 12px;
        }

        .rides-table th,
        .rides-table td {
            padding: 12px 8px;
        }

        .participant-avatar {
            width: 28px;
            height: 28px;
            font-size: 11px;
        }

        .btn {
            padding: 5px 10px;
            font-size: 10px;
        }
    }

    @media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 20px;
        }

        .header-nav a {
            margin: 0 10px;
        }

        .stats-cards {
            grid-template-columns: 1fr;
        }

        .table-header {
            flex-direction: column;
            gap: 20px;
        }

        .search-box {
            width: 100%;
        }

        .rides-table {
            font-size: 11px;
        }

        .rides-table th,
        .rides-table td {
            padding: 8px 6px;
        }

        .filter-row {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="header">
    <div class="header-content">
        <h1>🚗 Uber Admin Dashboard</h1>
        <div class="header-nav">
            <a asp-controller="Admin" asp-action="AdminDashBoard">Dashboard</a>
            <a asp-controller="Admin" asp-action="Admin_Drivers">Drivers</a>
            <a asp-controller="Admin" asp-action="Admin_Riders">Riders</a>
            <a asp-controller="Admin" asp-action="Admin_Rides">Rides</a>
            <a asp-controller="Admin" asp-action="Admin_Admines">Admins</a>
        </div>
    </div>
</div>

<div class="container">
    <h1 class="page-title">🚗 Rides Management</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            ✅ @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            ❌ @TempData["ErrorMessage"]
        </div>
    }

    <div class="stats-cards">
        <div class="stat-card">
            <div class="stat-number">@Model.Count</div>
            <div class="stat-label">Total Rides</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(r => r.Status == Uber.DAL.Enums.RideStatus.Completed)</div>
            <div class="stat-label">Completed</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(r => r.Status == Uber.DAL.Enums.RideStatus.InProgress)</div>
            <div class="stat-label">In Progress</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(r => r.Status == Uber.DAL.Enums.RideStatus.Pending)</div>
            <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(r => r.Status == Uber.DAL.Enums.RideStatus.Cancelled)</div>
            <div class="stat-label">Cancelled</div>
        </div>
    </div>

    <div class="filters">
        <h3>🔍 Filters</h3>
        <div class="filter-row">
            <div class="filter-group">
                <label for="statusFilter">Status</label>
                <select id="statusFilter" class="filter-control">
                    <option value="">All Statuses</option>
                    <option value="Pending">Pending</option>
                    <option value="Accepted">Accepted</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Cancelled">Cancelled</option>
                    <option value="InProgress">In Progress</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="dateFilter">Date Range</label>
                <input type="date" id="dateFilter" class="filter-control">
            </div>
            <div class="filter-group">
                <label for="searchInput">Search</label>
                <input type="text" id="searchInput" class="filter-control" placeholder="Search rides...">
            </div>
            <button class="filter-btn" onclick="applyFilters()">Apply Filters</button>
        </div>
    </div>

    <div class="rides-table-container">
        <div class="table-header">
            <h2>📋 All Rides</h2>
            <div class="search-box">
                <input type="text" id="quickSearch" placeholder="Quick search..." onkeyup="quickSearch()">
            </div>
        </div>

        @if (Model != null && Model.Any())
        {
            <div style="overflow-x: auto;">
                <table class="rides-table" id="ridesTable">
                    <thead>
                        <tr>
                            <th>Ride ID</th>
                            <th>Participants</th>
                            <th>Status</th>
                            <th>Pickup Location</th>
                            <th>Drop-off Location</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Fare</th>
                            <th>Rating</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ride in Model)
                        {
                            <tr>
                                <td>
                                    <div class="ride-id">#@ride.Id</div>
                                    <div style="font-size: 11px; color: #7f8c8d;">@ride.CreatedAt.ToString("MMM dd, yyyy")</div>
                                </td>
                                <td>
                                    <div class="participants">
                                        @if (ride.Driver != null)
                                        {
                                            <div class="participant driver">
                                                <div class="participant-avatar">D</div>
                                                <div class="participant-info">
                                                    <div class="participant-name">@ride.Driver.Name</div>
                                                    <div class="participant-details">Driver • @ride.Driver.PhoneNumber</div>
                                                </div>
                                            </div>
                                        }
                                        @if (ride.User != null)
                                        {
                                            <div class="participant rider">
                                                <div class="participant-avatar">R</div>
                                                <div class="participant-info">
                                                    <div class="participant-name">@ride.User.Name</div>
                                                    <div class="participant-details">Rider • @ride.User.PhoneNumber</div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="status-badge status-@ride.Status.ToString().ToLower()">
                                        @ride.Status.ToString()
                                    </span>
                                </td>
                                <td>
                                    <div class="location-info">
                                        <div class="location pickup">
                                            <div class="location-label">Pickup</div>
                                            <div class="location-coords">@ride.StartLat.ToString("F6"), @ride.StartLng.ToString("F6")</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="location-info">
                                        <div class="location dropoff">
                                            <div class="location-label">Drop-off</div>
                                            <div class="location-coords">@ride.EndLat.ToString("F6"), @ride.EndLng.ToString("F6")</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="datetime-info">
                                        <div class="date">@ride.CreatedAt.ToString("MMM dd")</div>
                                        <div class="time">@ride.CreatedAt.ToString("HH:mm")</div>
                                    </div>
                                </td>
                                <td>
                                    <div class="datetime-info">
                                        @if (ride.Status == Uber.DAL.Enums.RideStatus.Completed)
                                        {
                                            <div class="date">@ride.CreatedAt.AddMinutes(30).ToString("MMM dd")</div>
                                            <div class="time">@ride.CreatedAt.AddMinutes(30).ToString("HH:mm")</div>
                                        }
                                        else
                                        {
                                            <span style="color: #6c757d; font-style: italic;">-</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="fare-info">
                                        @if (ride.Status == Uber.DAL.Enums.RideStatus.Completed)
                                        {
                                            <div class="fare-amount">$@(CalculateFare(ride.StartLat, ride.StartLng, ride.EndLat, ride.EndLng).ToString("F2"))</div>
                                            <div class="fare-label">Calculated</div>
                                        }
                                        else
                                        {
                                            <span style="color: #6c757d; font-style: italic;">Pending</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="rating-info">
                                        @if (ride.Rate.HasValue)
                                        {
                                            <div class="rating">@ride.Rate/5</div>
                                            <div class="rating-label">Stars</div>
                                        }
                                        else
                                        {
                                            <span style="color: #6c757d; font-style: italic;">No rating</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-view" onclick="viewRideDetails(@ride.Id)">
                                            👁️ View
                                        </button>
                                        @if (ride.Status == Uber.DAL.Enums.RideStatus.Pending || ride.Status == Uber.DAL.Enums.RideStatus.Accepted)
                                        {
                                            <button class="btn btn-cancel" onclick="cancelRide(@ride.Id)">
                                                ❌ Cancel
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div style="font-size: 48px; margin-bottom: 20px;">🚗</div>
                <h3>No Rides Found</h3>
                <p>There are currently no rides in the system.</p>
            </div>
        }
    </div>
</div>

<script>
    function quickSearch() {
        const input = document.getElementById('quickSearch');
        const filter = input.value.toLowerCase();
        const table = document.getElementById('ridesTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) {
            const row = rows[i];
            const cells = row.getElementsByTagName('td');
            let found = false;

            for (let j = 0; j < cells.length; j++) {
                const cell = cells[j];
                if (cell.textContent.toLowerCase().indexOf(filter) > -1) {
                    found = true;
                    break;
                }
            }

            row.style.display = found ? '' : 'none';
        }
    }

    function applyFilters() {
        const statusFilter = document.getElementById('statusFilter').value;
        const dateFilter = document.getElementById('dateFilter').value;
        const searchFilter = document.getElementById('searchInput').value;

        // Apply filters logic here
        console.log('Applying filters:', { statusFilter, dateFilter, searchFilter });
        
        // For now, just show a message
        alert('Filters applied! (Implementation needed)');
    }

    function viewRideDetails(rideId) {
        // Navigate to ride details page
        window.location.href = `/Admin/RideDetails/${rideId}`;
    }

    function cancelRide(rideId) {
        if (confirm('Are you sure you want to cancel this ride?')) {
            // Submit cancellation form
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("CancelRide", "Admin")';
            
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = rideId;
            
            form.appendChild(idInput);
            document.body.appendChild(form);
            form.submit();
        }
    }

    // Auto-hide alerts after 5 seconds
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        });
    }, 5000);
</script>

@functions {
    private double CalculateFare(double startLat, double startLng, double endLat, double endLng)
    {
        // Simple distance calculation using Haversine formula
        const double R = 6371; // Earth's radius in kilometers
        
        var lat1 = startLat * Math.PI / 180;
        var lat2 = endLat * Math.PI / 180;
        var deltaLat = (endLat - startLat) * Math.PI / 180;
        var deltaLng = (endLng - startLng) * Math.PI / 180;
        
        var a = Math.Sin(deltaLat / 2) * Math.Sin(deltaLat / 2) +
                Math.Cos(lat1) * Math.Cos(lat2) *
                Math.Sin(deltaLng / 2) * Math.Sin(deltaLng / 2);
        
        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        var distance = R * c;
        
        // Base fare: $2.50 + $1.50 per km
        return 2.50 + (distance * 1.50);
    }
}

