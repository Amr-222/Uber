@{
    ViewData["Title"] = "Driver Dashboard";
}

<h2>Driver Dashboard</h2>

<!-- Driver Status Section -->
<div style="margin-bottom: 20px; padding: 15px; background-color: #e8f5e8; border-radius: 8px; border-left: 4px solid #28a745;">
    <h4 style="color: #28a745; margin: 0 0 10px 0;">🚗 Driver Status</h4>
    <div style="display: flex; align-items: center; gap: 15px;">
        <div>
            <strong>Current Status:</strong> 
            <span id="driverStatus" style="padding: 5px 12px; background-color: #28a745; color: white; border-radius: 15px; font-size: 12px; font-weight: bold;">
                Active
            </span>
        </div>
        <button onclick="toggleDriverStatus()" id="toggleStatusBtn" style="padding: 8px 16px; background-color: #dc3545; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Set Inactive
        </button>
    </div>
    <small style="color: #6c757d; margin-top: 10px; display: block;">
        Active drivers receive ride requests. Inactive drivers are not considered for new rides.
    </small>
</div>

<p>Waiting for ride requests...</p>

<div id="rideRequests"></div>
<div id="connectionStatus" style="margin-top: 20px; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
    <strong>Connection Status:</strong> <span id="statusText">Connecting...</span>
</div>

<!-- Status Log Section -->
<div id="statusLog" style="margin-top: 20px; padding: 15px; background-color: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107;">
    <h4 style="color: #856404; margin: 0 0 10px 0;">📋 Status Log</h4>
    <div id="logContent" style="max-height: 200px; overflow-y: auto; font-family: monospace; font-size: 12px; background-color: #f8f9fa; padding: 10px; border-radius: 5px;">
        <div>Page loaded - Initializing...</div>
    </div>
    <button onclick="clearLog()" style="margin-top: 10px; padding: 5px 10px; background-color: #6c757d; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Clear Log
    </button>
</div>

<!-- Use CDN for SignalR client library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    let connection;
    let isConnected = false;

    // Initialize SignalR connection
    async function initializeConnection() {
        try {
            // Create connection to RideHub
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/rideHub", { 
                    skipNegotiation: true,
                    transport: signalR.HttpTransportType.WebSockets
                })
                .withAutomaticReconnect()
                .build();

            // Connection event handlers
            connection.onreconnecting(() => {
                updateStatus("Reconnecting...", "orange");
            });

            connection.onreconnected(() => {
                updateStatus("Connected", "green");
                isConnected = true;
            });

            connection.onclose(() => {
                updateStatus("Disconnected", "red");
                isConnected = false;
            });

            // When a ride request is received from RideController
            connection.on("ReceiveRideRequest", function (ride) {
                console.log("Received ride request:", ride);
                displayRideRequest(ride);
                
                // Show notification
                if (Notification.permission === "granted") {
                    new Notification("New Ride Request", {
                        body: "You have a new ride request!",
                        icon: "/favicon.ico"
                    });
                }
            });

            // Start connection
            await connection.start();
            updateStatus("Connected", "green");
            isConnected = true;
            console.log("SignalR Connected. Connection ID:", connection.connectionId);

            // Join driver-specific group - this is crucial for receiving ride requests
            await joinDriverGroup();

        } catch (err) {
            console.error("SignalR Connection Error:", err);
            updateStatus("Connection Failed: " + err.message, "red");
        }
    }

    // Function to join driver-specific group
    async function joinDriverGroup() {
        try {
            // Get the current user's ID from the page or authentication context
            // For now, we'll use a placeholder - in production, this should come from the server
            const driverId = await getCurrentDriverId();
            if (driverId) {
                await connection.invoke("JoinDriverGroup", driverId);
                console.log("Joined driver group:", driverId);
                updateStatus("Connected and joined driver group", "green");
            } else {
                console.warn("Could not determine driver ID");
                updateStatus("Connected but driver ID not found", "orange");
            }
        } catch (err) {
            console.error("Error joining driver group:", err);
        }
    }

    // Function to get current driver ID - this should be implemented based on your auth system
    async function getCurrentDriverId() {
        try {
            const response = await fetch('/Driver/GetCurrentDriverId');
            if (response.ok) {
                const data = await response.json();
                return data.driverId;
            } else {
                console.error('Failed to get driver ID:', response.status);
                return null;
            }
        } catch (err) {
            console.error('Error getting driver ID:', err);
            return null;
        }
    }

    function updateStatus(message, color) {
        const statusText = document.getElementById("statusText");
        statusText.textContent = message;
        statusText.style.color = color;
    }

    function displayRideRequest(ride) {
        const container = document.getElementById("rideRequests");
        
        // Clear previous requests
        container.innerHTML = "";

        const rideDiv = document.createElement("div");
        rideDiv.className = "ride-request";
        rideDiv.style.cssText = "border: 2px solid #007bff; border-radius: 8px; padding: 20px; margin: 15px; background-color: #f8f9fa; box-shadow: 0 2px 4px rgba(0,0,0,0.1);";
        
        rideDiv.innerHTML = `
            <h4 style="color: #007bff; margin-bottom: 15px;">🚗 New Ride Request</h4>
            <div style="margin-bottom: 15px;">
                <p><strong>Pickup Location:</strong> ${ride.startLat.toFixed(6)}, ${ride.startLng.toFixed(6)}</p>
                <p><strong>Destination:</strong> ${ride.endLat.toFixed(6)}, ${ride.endLng.toFixed(6)}</p>
                <p><strong>Ride ID:</strong> ${ride.rideId}</p>
            </div>
            <div style="display: flex; gap: 10px;">
                <button onclick="acceptRide('${ride.rideId}', '${ride.rideGroup}')" 
                        style="background-color: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                    ✅ Accept Ride
                </button>
                <button onclick="rejectRide('${ride.rideId}', '${ride.rideGroup}')" 
                        style="background-color: #dc3545; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                    ❌ Reject Ride
                </button>
            </div>
        `;
        
        container.appendChild(rideDiv);
    }

    // Function to accept ride
    async function acceptRide(rideId, rideGroup) {
        try {
            const response = await fetch(`/Ride/DriverAccept`, {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: parseInt(rideId),
                    rideGroup: rideGroup
                })
            });

            if (response.ok) {
                document.getElementById("rideRequests").innerHTML = "<div style='color: green; padding: 20px; text-align: center;'><h3>✅ Ride Accepted!</h3><p>Redirecting to ride details...</p></div>";
                
                // Redirect to ride details page after a short delay
                setTimeout(() => {
                    window.location.href = `/Ride/RideDetails/${rideId}`;
                }, 2000);
            } else {
                const errorData = await response.json();
                alert("Error accepting ride: " + (errorData.message || "Unknown error"));
            }
        } catch (err) {
            console.error("Error:", err);
            alert("Error accepting ride. Please try again.");
        }
    }

    // Function to reject ride
    async function rejectRide(rideId, rideGroup) {
        try {
            const response = await fetch(`/Ride/DriverReject`, {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: parseInt(rideId),
                    rideGroup: rideGroup
                })
            });

            if (response.ok) {
                document.getElementById("rideRequests").innerHTML = "<div style='color: orange; padding: 20px; text-align: center;'><h3>⚠️ Ride Rejected</h3><p>You have rejected the ride request.</p></div>";
                
                // Clear the ride request after rejecting
                setTimeout(() => {
                    document.getElementById("rideRequests").innerHTML = "<p>Waiting for new ride requests...</p>";
                }, 3000);
            } else {
                const errorData = await response.json();
                alert("Error rejecting ride: " + (errorData.message || "Unknown error"));
            }
        } catch (err) {
            console.error("Error:", err);
            alert("Error rejecting ride. Please try again.");
        }
    }

    // Request notification permission
    if (Notification.permission === "default") {
        Notification.requestPermission();
    }

    // Initialize connection when page loads
    document.addEventListener('DOMContentLoaded', function() {
        addLogEntry('🚀 Page loaded - Starting initialization...');
        initializeConnection();
        startHeartbeat(); // Start heartbeat when page loads
        
        // Get current driver status and update UI
        addLogEntry('📡 Fetching current driver status...');
        getCurrentDriverStatus();
    });

    // Function to set driver as active (for heartbeat)
    async function setDriverActive() {
        addLogEntry('Setting driver as ACTIVE...');
        try {
            const response = await fetch('/Driver/MakeUserActive', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (response.ok) {
                addLogEntry('✅ Driver status set to ACTIVE successfully');
                console.log('Driver status set to active');
                updateDriverStatusDisplay(true);
            } else {
                const errorData = await response.json();
                addLogEntry(`❌ Failed to set driver as ACTIVE: ${errorData.message || 'Unknown error'}`);
                console.error('Failed to set driver as active:', errorData);
            }
        } catch (err) {
            addLogEntry(`❌ Error setting driver as ACTIVE: ${err.message}`);
            console.error('Error setting driver as active:', err);
        }
    }

    // Function to set driver as inactive
    async function setDriverInactive() {
        addLogEntry('Setting driver as INACTIVE...');
        try {
            const response = await fetch('/Driver/MakeUserInactive', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (response.ok) {
                addLogEntry('✅ Driver status set to INACTIVE successfully');
                console.log('Driver status set to inactive');
                updateDriverStatusDisplay(false);
            } else {
                const errorData = await response.json();
                addLogEntry(`❌ Failed to set driver as INACTIVE: ${errorData.message || 'Unknown error'}`);
                console.error('Failed to set driver as inactive:', errorData);
            }
        } catch (err) {
            addLogEntry(`❌ Error setting driver as INACTIVE: ${err.message}`);
            console.error('Error setting driver as inactive:', err);
        }
    }

    // Function to update the driver status display
    function updateDriverStatusDisplay(isActive) {
        const statusElement = document.getElementById('driverStatus');
        const toggleButton = document.getElementById('toggleStatusBtn');
        
        if (statusElement && toggleButton) {
            if (isActive) {
                statusElement.textContent = 'Active';
                statusElement.style.backgroundColor = '#28a745';
                toggleButton.textContent = 'Set Inactive';
                toggleButton.style.backgroundColor = '#dc3545';
            } else {
                statusElement.textContent = 'Inactive';
                statusElement.style.backgroundColor = '#6c757d';
                toggleButton.textContent = 'Set Active';
                toggleButton.style.backgroundColor = '#28a745';
            }
        }
    }

    // Function to get current driver status from server
    async function getCurrentDriverStatus() {
        addLogEntry('Fetching current driver status from server...');
        try {
            const response = await fetch('/Driver/GetCurrentDriverStatus');
            if (response.ok) {
                const data = await response.json();
                addLogEntry(`📊 Current driver status: ${data.isActive ? 'ACTIVE' : 'INACTIVE'}`);
                updateDriverStatusDisplay(data.isActive);
                return data.isActive;
            } else {
                const errorData = await response.json();
                addLogEntry(`❌ Failed to get current driver status: ${errorData.message || 'Unknown error'}`);
                console.error('Failed to get current driver status:', errorData);
                return null;
            }
        } catch (err) {
            addLogEntry(`❌ Error getting current driver status: ${err.message}`);
            console.error('Error getting current driver status:', err);
            return null;
        }
    }

    // ===== DRIVER STATUS EVENT LISTENERS =====
    // IMPORTANT CHANGES: Removed aggressive event listeners that were causing
    // drivers to become inactive when they shouldn't (clicking outside window,
    // switching tabs, etc.). Now drivers only become inactive when:
    // - Actually leaving the page (unload, pagehide, beforeunload)
    // - Losing internet connection (offline)
    // - Being idle for 5 minutes (userActivityTimeout)
    
    // Event listeners for page unload
    // REMOVED: Duplicate beforeunload event listener
    // window.addEventListener('beforeunload', function(e) {
    //     // Set driver as inactive when leaving the page
    //     setDriverInactive();
    // });

    // IMPORTANT: Only these events will set driver as inactive:
    // - unload: When the page is actually closed/refreshed
    // - pagehide: When the tab/window is closed
    // - beforeunload: When leaving the page (with confirmation dialog)
    // - offline: When internet connection is lost
    // - idle timeout: After 5 minutes of no user activity
    window.addEventListener('unload', function(e) {
        // Set driver as inactive when leaving the page
        setDriverInactive();
    });

    // Event listener for page visibility change (when user switches tabs or minimizes browser)
    // REMOVED: This was causing drivers to become inactive when switching tabs
    // document.addEventListener('visibilitychange', function() {
    //     if (document.hidden) {
    //         // Page is hidden (user switched tabs or minimized browser)
    //         setDriverInactive();
    //     } else {
    //         // Page is visible again (user returned to the page)
    //         setDriverActive();
    //     }
    // });

    // Event listener for page focus/blur (when user switches between applications)
    // REMOVED: This was causing drivers to become inactive when clicking outside the window
    // window.addEventListener('blur', function() {
    //     // User switched to another application
    //     setDriverInactive();
    // });

    // window.addEventListener('focus', function() {
    //     // User returned to the application
    //     setDriverActive();
    // });

    // Event listener for browser navigation (back/forward buttons)
    // REMOVED: This was causing drivers to become inactive when using browser navigation
    // window.addEventListener('popstate', function() {
    //     // User navigated away using browser navigation
    //     setDriverInactive();
    // });

    // Event listener for beforeunload with confirmation dialog
    window.addEventListener('beforeunload', function(e) {
        // Show confirmation dialog and set driver as inactive
        setDriverInactive();
        e.preventDefault();
        e.returnValue = '';
    });

    // Event listener for page hide (when closing tab/window)
    window.addEventListener('pagehide', function() {
        // User is closing the tab or window
        setDriverInactive();
    });

    // Event listener for page show (when returning to the page)
    window.addEventListener('pageshow', function() {
        // User returned to the page
        if (!document.hidden) {
            setDriverActive();
            startHeartbeat();
        }
    });

    // Event listeners for online/offline status
    window.addEventListener('online', function() {
        // Internet connection restored
        console.log('Internet connection restored');
        // Reconnect SignalR if needed
        if (connection && !isConnected) {
            initializeConnection();
        }
    });

    window.addEventListener('offline', function() {
        // Internet connection lost
        console.log('Internet connection lost');
        // Set driver as inactive when offline
        setDriverInactive();
    });

    // User activity monitoring to detect idle state
    let userActivityTimeout;
    const IDLE_TIMEOUT = 5 * 60 * 1000; // 5 minutes

    function resetUserActivityTimer() {
        clearTimeout(userActivityTimeout);
        userActivityTimeout = setTimeout(() => {
            // User has been idle for 5 minutes, set as inactive
            console.log('User idle for 5 minutes, setting driver as inactive');
            setDriverInactive();
        }, IDLE_TIMEOUT);
    }

    // Reset timer on user activity
    ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {
        document.addEventListener(event, resetUserActivityTimer, true);
    });

    // Initialize user activity timer
    resetUserActivityTimer();

    // Device sleep/wake detection
    // REMOVED: This was too aggressive and caused false positives
    // let wasPageVisible = true;
    
    // function checkDeviceSleep() {
    //     if (wasPageVisible && document.hidden) {
    //         // Device might be going to sleep
    //         console.log('Device might be going to sleep');
    //         setDriverInactive();
    //     }
    //     wasPageVisible = !document.hidden;
    // }

    // Check for device sleep every second
    // setInterval(checkDeviceSleep, 1000);

    // Cleanup function to be called when leaving the page
    function cleanup() {
        stopHeartbeat();
        clearTimeout(userActivityTimeout);
        setDriverInactive();
    }

    // Call cleanup when page is unloaded
    window.addEventListener('unload', cleanup);

    // Add a method to manually set driver status (for debugging/testing)
    window.setDriverStatus = function(active) {
        if (active) {
            setDriverActive();
        } else {
            setDriverInactive();
        }
    };

    // Add a method to get current driver status (for debugging/testing)
    window.getDriverStatus = async function() {
        try {
            const response = await fetch('/Driver/GetCurrentDriverId');
            if (response.ok) {
                const data = await response.json();
                console.log('Current driver ID:', data.driverId);
                return data.driverId;
            }
        } catch (err) {
            console.error('Error getting driver status:', err);
        }
    };

    // Add a method to test the driver status functionality
    window.testDriverStatus = function() {
        console.log('Testing driver status functionality...');
        console.log('Current connection state:', connection?.connectionState);
        console.log('Current driver ID:', getCurrentDriverId());
        
        // Test setting active
        setDriverActive();
        setTimeout(() => {
            // Test setting inactive
            setDriverInactive();
            setTimeout(() => {
                // Test setting active again
                setDriverActive();
            }, 1000);
        }, 1000);
        
        alert('Driver status test started. Check console for details.');
    };

    // Heartbeat mechanism to keep driver active while on the page
    let heartbeatInterval;
    
    function startHeartbeat() {
        // Send heartbeat every 30 seconds to keep driver active
        heartbeatInterval = setInterval(async () => {
            if (!document.hidden && navigator.onLine) {
                try {
                    await setDriverActive();
                } catch (err) {
                    console.error('Heartbeat error:', err);
                }
            }
        }, 30000); // 30 seconds
    }

    function stopHeartbeat() {
        if (heartbeatInterval) {
            clearInterval(heartbeatInterval);
            heartbeatInterval = null;
        }
    }

    // Start heartbeat when page becomes visible
    // REMOVED: This was causing drivers to become inactive when switching tabs
    // document.addEventListener('visibilitychange', function() {
    //     if (document.hidden) {
    //         stopHeartbeat();
    //         setDriverInactive();
    //     } else {
    //         startHeartbeat();
    //         setDriverActive();
    //     }
    // });

    // Test function to simulate receiving a ride request (for debugging)
    window.testRideRequest = function() {
        const testRide = {
            rideId: 123,
            rideGroup: "ride-123",
            startLat: 40.7128,
            startLng: -74.0060,
            endLat: 40.7589,
            endLng: -73.9851
        };
        displayRideRequest(testRide);
        console.log('Test ride request displayed:', testRide);
    };
</script>

<!-- Debug section -->
<div style="margin-top: 30px; padding: 20px; background-color: #f0f0f0; border-radius: 5px;">
    <h4>Debug Tools:</h4>
    <button onclick="window.testRideRequest()" style="padding: 8px 16px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Test Ride Request
    </button>
    <button onclick="console.log('Connection:', connection)" style="padding: 8px 16px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Log Connection
    </button>
    <button onclick="testSignalRConnection()" style="padding: 8px 16px; margin: 5px; background-color: #17a2b8; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Test SignalR
    </button>
    <button onclick="testDriverGroup()" style="padding: 8px 16px; margin: 5px; background-color: #28a745; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Test Driver Group
    </button>
    <button onclick="window.testDriverStatus()" style="padding: 8px 16px; margin: 5px; background-color: #ffc107; color: black; border: none; border-radius: 3px; cursor: pointer;">
        Test Driver Status
    </button>
    <button onclick="getCurrentDriverStatus()" style="padding: 8px 16px; margin: 5px; background-color: #17a2b8; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Get Current Status
    </button>
    <button onclick="window.setDriverStatus(true)" style="padding: 8px 16px; margin: 5px; background-color: #17a2b8; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Set Active
    </button>
    <button onclick="window.setDriverStatus(false)" style="padding: 8px 16px; margin: 5px; background-color: #dc3545; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Set Inactive
    </button>
    <button onclick="testDriverStatusAPI()" style="padding: 8px 16px; margin: 5px; background-color: #6f42c1; color: white; border: none; border-radius: 3px; cursor: pointer;">
        Test Status API
    </button>
</div>

<script>
    // Test SignalR connection
    async function testSignalRConnection() {
        if (!connection || !isConnected) {
            alert("SignalR not connected!");
            return;
        }
        
        try {
            // Test the connection by trying to invoke a simple method
            const connectionId = connection.connectionId;
            console.log("SignalR connection test successful!");
            console.log("Connection ID:", connectionId);
            console.log("Connection State:", connection.connectionState);
            alert(`SignalR connection test successful!\nConnection ID: ${connectionId}\nState: ${connection.connectionState}`);
        } catch (err) {
            console.error("SignalR test error:", err);
            alert("SignalR test failed: " + err.message);
        }
    }

    // Test driver group functionality
    async function testDriverGroup() {
        if (!connection || !isConnected) {
            alert("SignalR not connected!");
            return;
        }
        
        try {
            const driverId = await getCurrentDriverId();
            if (driverId) {
                await connection.invoke("JoinDriverGroup", driverId);
                alert(`Successfully joined driver group: driver-${driverId}`);
                console.log("Driver group test successful");
            } else {
                alert("Could not get driver ID!");
            }
        } catch (err) {
            console.error("Driver group test error:", err);
            alert("Driver group test failed: " + err.message);
        }
    }

    // Function to toggle driver status
    window.toggleDriverStatus = async function() {
        const currentStatus = document.getElementById("driverStatus").textContent;
        const newStatus = currentStatus === "Active" ? "Inactive" : "Active";
        document.getElementById("driverStatus").textContent = newStatus;
        document.getElementById("toggleStatusBtn").textContent = newStatus;

        try {
            const response = await fetch('/Driver/ToggleDriverStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    isActive: newStatus === "Active"
                })
            });

            if (response.ok) {
                console.log(`Driver status set to ${newStatus}`);
                alert(`Driver status set to ${newStatus}`);
            } else {
                const errorData = await response.json();
                alert(`Error setting driver status to ${newStatus}: ${errorData.message || "Unknown error"}`);
                // Revert status if setting fails
                document.getElementById("driverStatus").textContent = currentStatus;
                document.getElementById("toggleStatusBtn").textContent = currentStatus;
            }
        } catch (err) {
            console.error("Error toggling driver status:", err);
            alert("Error toggling driver status. Please try again.");
        }
    };

    // Test driver status API
    async function testDriverStatusAPI() {
        try {
            const response = await fetch('/Driver/GetCurrentDriverStatus');
            if (response.ok) {
                const data = await response.json();
                alert(`Current Driver Status: ${data.isActive ? 'Active' : 'Inactive'}`);
                console.log('Current Driver Status:', data);
            } else {
                const errorData = await response.json();
                alert(`Error fetching current driver status: ${errorData.message || 'Unknown error'}`);
                console.error('Error fetching current driver status:', errorData);
            }
        } catch (err) {
            console.error('Error testing driver status API:', err);
            alert('Error testing driver status API. Please try again.');
        }
    }

    // Function to add log entries
    function addLogEntry(message) {
        const logContent = document.getElementById('logContent');
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.innerHTML = `[${timestamp}] ${message}`;
        logContent.appendChild(logEntry);
        logContent.scrollTop = logContent.scrollHeight;
        console.log(`[LOG] ${message}`);
    }

    // Function to clear the status log
    function clearLog() {
        const logContent = document.getElementById('logContent');
        logContent.innerHTML = '<div>Page loaded - Initializing...</div>';
    }
</script>
