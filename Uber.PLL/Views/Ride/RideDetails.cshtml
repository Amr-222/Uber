@model Uber.DAL.Entities.Ride

@{
    ViewData["Title"] = "Ride Details";
    var isDriver = User.IsInRole("Driver") || User.IsInRole("Admin");
    var isUser = User.IsInRole("User") || User.IsInRole("Admin");
}

<!-- Map CSS and JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    #rideMap {
        width: 100%;
        height: 400px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .map-container {
        background-color: white;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    
    .map-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-top: 15px;
    }
    
    .map-info-item {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        text-align: center;
    }
    
    .map-info-item h5 {
        margin: 0 0 10px 0;
        color: #6c757d;
        font-size: 14px;
    }
    
    .map-info-item p {
        margin: 0;
        font-weight: bold;
        color: #495057;
        font-size: 18px;
    }
</style>

<div style="max-width: 1000px; margin: 0 auto; padding: 20px;">
    <div style="text-align: center; margin-bottom: 30px;">
        <h2 style="color: #007bff;">üöó Active Ride</h2>
        <div style="display: inline-block; padding: 8px 16px; background-color: #28a745; color: white; border-radius: 20px; font-weight: bold;">
            Ride ID: @Model.Id
        </div>
    </div>

    <!-- Ride Status -->
    <div class="ride-status-info" style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #28a745;">
        <h4 style="color: #28a745; margin: 0;">‚úÖ Ride Accepted</h4>
        <p style="margin: 10px 0 0 0; color: #2d5a2d;">Your ride is confirmed and on the way!</p>
    </div>

    <!-- Map Section -->
    <div class="map-container">
        <h4 style="color: #495057; margin-bottom: 20px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üó∫Ô∏è Ride Route</h4>
        <div id="rideMap"></div>
        <div class="map-info">
            <div class="map-info-item">
                <h5>üöÄ Pickup Location</h5>
                <p>@Model.StartLat.ToString("F6"), @Model.StartLng.ToString("F6")</p>
            </div>
            <div class="map-info-item">
                <h5>üéØ Destination</h5>
                <p>@Model.EndLat.ToString("F6"), @Model.EndLng.ToString("F6")</p>
            </div>
            <div class="map-info-item">
                <h5>üìè Distance</h5>
                <p id="routeDistance">Calculating...</p>
            </div>
            <div class="map-info-item">
                <h5>‚è±Ô∏è Duration</h5>
                <p id="routeDuration">Calculating...</p>
            </div>
        </div>
    </div>

    <!-- Ride Information -->
    <div style="background-color: white; padding: 25px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px;">
        <h4 style="color: #495057; margin-bottom: 20px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üìç Ride Details</h4>
        
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            <div>
                <h5 style="color: #6c757d; margin-bottom: 10px;">üöÄ Pickup Location</h5>
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                    <p style="margin: 0; font-weight: bold;">@Model.StartLat.ToString("F6"), @Model.StartLng.ToString("F6")</p>
                    <small style="color: #6c757d;">Latitude, Longitude</small>
                </div>
            </div>
            
            <div>
                <h5 style="color: #6c757d; margin-bottom: 10px;">üéØ Destination</h5>
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                    <p style="margin: 0; font-weight: bold;">@Model.EndLat.ToString("F6"), @Model.EndLng.ToString("F6")</p>
                    <small style="color: #6c757d;">Latitude, Longitude</small>
                </div>
            </div>
        </div>

        <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #e9ecef;">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                <div>
                    <h5 style="color: #6c757d; margin-bottom: 10px;">üìÖ Request Time</h5>
                    <p style="margin: 0; font-weight: bold;">@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</p>
                </div>
                
                <div>
                    <h5 style="color: #6c757d; margin-bottom: 10px;">üîÑ Status</h5>
                    <span style="padding: 5px 12px; background-color: #28a745; color: white; border-radius: 15px; font-size: 12px; font-weight: bold;">
                        @Model.Status.ToString()
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Driver Information (if user is viewing) -->
    @if (isUser && Model.Driver != null)
    {
        <div style="background-color: white; padding: 25px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px;">
            <h4 style="color: #495057; margin-bottom: 20px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üë®‚Äçüíº Driver Information</h4>
            
            <div style="display: flex; align-items: center; gap: 20px;">
                <div style="width: 60px; height: 60px; background-color: #007bff; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 24px; font-weight: bold;">
                    @(Model.Driver.UserName?.Substring(0, 1).ToUpper() ?? "D")
                </div>
                
                <div>
                    <h5 style="margin: 0; color: #495057;">@Model.Driver.UserName</h5>
                    <p style="margin: 5px 0 0 0; color: #6c757d;">Your assigned driver</p>
                </div>
            </div>
        </div>
    }

    <!-- User Information (if driver is viewing) -->
    @if (isDriver && Model.User != null)
    {
        <div style="background-color: white; padding: 25px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px;">
            <h4 style="color: #495057; margin-bottom: 20px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üë§ Passenger Information</h4>
            
            <div style="display: flex; align-items: center; gap: 20px;">
                <div style="width: 60px; height: 60px; background-color: #6c757d; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 24px; font-weight: bold;">
                    @(Model.User.UserName?.Substring(0, 1).ToUpper() ?? "U")
                </div>
                
                <div>
                    <h5 style="margin: 0; color: #495057;">@Model.User.UserName</h5>
                    <p style="margin: 5px 0 0 0; color: #6c757d;">Your passenger</p>
                </div>
            </div>
        </div>
    }

    <!-- Action Buttons -->
    <div style="text-align: center; margin-top: 30px;">
        @if (isDriver)
        {
            <button onclick="startRide()" style="padding: 15px 30px; background-color: #007bff; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 0 10px;">
                üöÄ Start Ride
            </button>
            <button onclick="completeRide()" style="padding: 15px 30px; background-color: #28a745; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 0 10px;">
                ‚úÖ Complete Ride
            </button>
        }
        
        <a href="/Home" style="display: inline-block; padding: 15px 30px; background-color: #6c757d; color: white; text-decoration: none; border-radius: 8px; font-size: 16px; margin: 0 10px;">
            üè† Back to Home
        </a>
    </div>

    <!-- Real-time Updates -->
    <div id="rideUpdates" style="margin-top: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 8px; display: none;">
        <h4 style="color: #495057; margin-bottom: 15px;">üîÑ Live Updates</h4>
        <div id="updateContent"></div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    let connection;
    let isConnected = false;
    let map, pickupMarker, dropoffMarker, routeLine;

    // Initialize map
    function initializeMap() {
        // Create map centered between pickup and destination
        const centerLat = (@Model.StartLat + @Model.EndLat) / 2;
        const centerLng = (@Model.StartLng + @Model.EndLng) / 2;
        
        map = L.map('rideMap').setView([centerLat, centerLng], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(map);

        // Add pickup and dropoff markers
        pickupMarker = L.marker([@Model.StartLat, @Model.StartLng], {
            icon: L.icon({
                iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',
                iconSize: [32, 32]
            })
        }).addTo(map).bindPopup("üöÄ Pickup Location").openPopup();

        dropoffMarker = L.marker([@Model.EndLat, @Model.EndLng], {
            icon: L.icon({
                iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684909.png',
                iconSize: [32, 32]
            })
        }).addTo(map).bindPopup("üéØ Destination").openPopup();

        // Draw route between points
        drawRoute();
    }

    // Draw route between pickup and destination
    async function drawRoute() {
        try {
            const start = [@Model.StartLat, @Model.StartLng];
            const end = [@Model.EndLat, @Model.EndLng];

            const response = await fetch(`https://router.project-osrm.org/route/v1/driving/${start[1]},${start[0]};${end[1]},${end[0]}?overview=full&geometries=geojson`);
            const data = await response.json();

            if (data.routes && data.routes.length > 0) {
                const route = data.routes[0];
                const path = route.geometry.coordinates.map(coord => [coord[1], coord[0]]);

                // Remove existing route line if any

                if (routeLine) {
                    map.removeLayer(routeLine);
                }

                // Draw new route line
                routeLine = L.polyline(path, { color: '#007bff', weight: 4, opacity: 0.8 }).addTo(map);

                // Fit map to show entire route
                map.fitBounds(routeLine.getBounds(), { padding: [20, 20] });

                // Update distance and duration
                const distance = (route.distance / 1000).toFixed(2);
                const duration = (route.duration / 60).toFixed(1);

                document.getElementById('routeDistance').textContent = distance + ' km';
                document.getElementById('routeDuration').textContent = duration + ' min';

                console.log(`Route: ${distance} km, ${duration} min`);
            }
        } catch (error) {
            console.error('Error drawing route:', error);
            document.getElementById('routeDistance').textContent = 'Error';
            document.getElementById('routeDuration').textContent = 'Error';
        }
    }

    // Initialize SignalR connection for real-time updates
    async function initializeConnection() {
        try {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/rideHub", { 
                    skipNegotiation: true,
                    transport: signalR.HttpTransportType.WebSockets
                })
                .withAutomaticReconnect()
                .build();

            // Join the ride group for updates
            await connection.start();
            await connection.invoke("JoinRideGroup", "ride-@Model.Id");
            isConnected = true;
            console.log("Connected to ride updates");

        } catch (err) {
            console.error("SignalR Connection Error:", err);
        }
    }

    // Driver functions
    function startRide() {
        if (confirm("Are you sure you want to start the ride?")) {
            updateRideStatus("InProgress", @Model.Id);
        }
    }

    function completeRide() {
        if (confirm("Are you sure you want to complete the ride?")) {
            updateRideStatus("Completed", @Model.Id);
        }
    }

    async function updateRideStatus(status, rideId) {
        try {
            let endpoint = '';
            if (status === 'InProgress') {
                endpoint = '/Ride/StartRide';
            } else if (status === 'Completed') {
                endpoint = '/Ride/CompleteRide';
            }

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rideId: rideId })
            });

            if (response.ok) {
                const data = await response.json();
                alert(data.message);
                
                // Update the UI based on the new status
                if (status === 'InProgress') {
                    document.querySelector('.ride-status-info').innerHTML = '<span style="padding: 5px 12px; background-color: #ffc107; color: white; border-radius: 15px; font-size: 12px; font-weight: bold;">In Progress</span>';
                    document.querySelector('.ride-status-info h4').textContent = 'üöÄ Ride Started';
                    document.querySelector('.ride-status-info p').textContent = 'Your ride is now in progress!';
                    document.querySelector('.ride-status-info').style.backgroundColor = '#fff3cd';
                    document.querySelector('.ride-status-info').style.borderLeftColor = '#ffc107';
                } else if (status === 'Completed') {
                    document.querySelector('.ride-status-info').innerHTML = '<span style="padding: 5px 12px; background-color: #28a745; color: white; border-radius: 15px; font-size: 12px; font-weight: bold;">Completed</span>';
                    document.querySelector('.ride-status-info h4').textContent = '‚úÖ Ride Completed';
                    document.querySelector('.ride-status-info p').textContent = 'Your ride has been completed successfully!';
                    document.querySelector('.ride-status-info').style.backgroundColor = '#e8f5e8';
                    document.querySelector('.ride-status-info').style.borderLeftColor = '#28a745';
                }
            } else {
                const errorData = await response.json();
                alert("Error updating ride status: " + (errorData.message || "Unknown error"));
            }
        } catch (err) {
            console.error("Error:", err);
            alert("Error updating ride status. Please try again.");
        }
    }

    // Listen for real-time ride updates
    connection.on("RideStarted", function (rideId) {
        if (rideId == @Model.Id) {
            // Update UI to show ride started
            document.querySelector('.ride-status-info').innerHTML = '<span style="padding: 5px 12px; background-color: #ffc107; color: white; border-radius: 15px; font-size: 12px; font-weight: bold;">In Progress</span>';
            document.querySelector('.ride-status-info h4').textContent = 'üöÄ Ride Started';
            document.querySelector('.ride-status-info p').textContent = 'Your ride is now in progress!';
            document.querySelector('.ride-status-info').style.backgroundColor = '#fff3cd';
            document.querySelector('.ride-status-info').style.borderLeftColor = '#ffc107';
        }
    });

    connection.on("RideCompleted", function (rideId) {
        if (rideId == @Model.Id) {
            // Update UI to show ride completed
            document.querySelector('.ride-status-info').innerHTML = '<span style="padding: 5px 12px; background-color: #28a745; color: white; border-radius: 15px; font-size: 12px; font-weight: bold;">Completed</span>';
            document.querySelector('.ride-status-info h4').textContent = '‚úÖ Ride Completed';
            document.querySelector('.ride-status-info p').textContent = 'Your ride has been completed successfully!';
            document.querySelector('.ride-status-info').style.backgroundColor = '#e8f5e8';
            document.querySelector('.ride-status-info').style.borderLeftColor = '#28a745';
        }
    });

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeMap();
        initializeConnection();
    });
</script>
